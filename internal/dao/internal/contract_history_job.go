// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"OnchainParser/internal/chain/ethEvm/consts"
	"OnchainParser/internal/model"
	"OnchainParser/internal/model/entity"
	"bytes"
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
	"strconv"
)

// ContractHistoryJobDao is the data access object for table contract_history_job.
type ContractHistoryJobDao struct {
	table   string                    // table is the underlying table name of the DAO.
	group   string                    // group is the database configuration group name of current DAO.
	columns ContractHistoryJobColumns // columns contains all the column names of Table for convenient usage.
}

// ContractHistoryJobColumns defines and stores column names for table contract_history_job.
type ContractHistoryJobColumns struct {
	ProtocolCode    string //协议编码
	ContractCode    string // 合约编码，用于分库作为数据库名
	isHistoryFinish string // 当前爬取到的区块号
	UpdateTime      string // 修改时间(时间戳)
}

// contractHistoryJobColumns holds the columns for table contract_history_job.
var contractHistoryJobColumns = ContractHistoryJobColumns{
	ProtocolCode:    "protocol_code",
	ContractCode:    "contract_code",
	isHistoryFinish: "is_history_finish",
	UpdateTime:      "update_time",
}

// NewBlockChainDao creates and returns a new DAO object for table data access.
func NewContractHistoryJobDao() *ContractHistoryJobDao {
	return &ContractHistoryJobDao{
		group:   "default",
		table:   "contract_history_job",
		columns: contractHistoryJobColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *ContractHistoryJobDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *ContractHistoryJobDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *ContractHistoryJobDao) Columns() ContractHistoryJobColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *ContractHistoryJobDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *ContractHistoryJobDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *ContractHistoryJobDao) CtxWithDatabase(ctx context.Context, database string) *gdb.Model {
	return dao.DB().Model(database + "." + dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *ContractHistoryJobDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *ContractHistoryJobDao) QueryOneByContract(ctx context.Context, protocolCode string, contractCode string, chainName string) (rcd entity.ContractHistoryJobEntity, err error) {

	key := chainName + "_" + consts.PROTOCOL_CONTRACT_HISTORY_FINISH_DATA_KEY + contractCode
	v, err := g.Redis().Do(ctx, "GET", key)
	if err == nil {
		serr := v.Struct(&rcd)
		if serr == nil && !g.IsEmpty(rcd.ContractCode) {
			return rcd, nil
		}
	}

	var res []entity.ContractHistoryJobEntity
	err = dao.CtxWithDatabase(ctx, chainName).Where("protocol_code =?", protocolCode).Where("contract_code =?", contractCode).Scan(&res)
	if err != nil {
		return rcd, err
	}

	if res != nil && len(res) > 0 {
		//设置缓存过期时间1天
		g.Redis().Do(ctx, "SETEX", key, 3600*24, rcd)
		return res[0], nil
	} else {
		return rcd, nil
	}
}

func (dao *ContractHistoryJobDao) ExecInsert(ctx context.Context, in model.ContractHistoryJobCreateInput, chainName string) error {
	var dimSqlDML bytes.Buffer
	dimSqlDML.WriteString("insert into ")
	dimSqlDML.WriteString(chainName + "." + dao.table)
	dimSqlDML.WriteString(" (protocol_code, contract_code, is_history_finish, update_time) values ( ")
	dimSqlDML.WriteString("'" + in.ProtocolCode + "'")
	dimSqlDML.WriteString(",")
	dimSqlDML.WriteString("'" + in.ContractCode + "'")
	dimSqlDML.WriteString(",")
	dimSqlDML.WriteString(strconv.FormatBool(in.IsHistoryFinish))
	dimSqlDML.WriteString(",")
	dimSqlDML.WriteString(strconv.FormatInt(int64(in.UpdateTime), 10))
	dimSqlDML.WriteString(")")

	_, err := dao.DB().Exec(ctx, dimSqlDML.String())
	if err != nil {
		return err
	}
	return nil
}
