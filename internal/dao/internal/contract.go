// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"OnchainParser/internal/chain/ethEvm/consts"
	"OnchainParser/internal/model"
	"OnchainParser/internal/model/entity"
	"bytes"
	"context"
	_ "github.com/gogf/gf/contrib/drivers/clickhouse/v2"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
	"strconv"
)

// ContractDao is the data access object for table Contract.
type ContractDao struct {
	table   string          // table is the underlying table name of the DAO.
	group   string          // group is the database configuration group name of current DAO.
	columns ContractColumns // columns contains all the column names of Table for convenient usage.
}

// ContractColumns defines and stores column names for table Contract.
type ContractColumns struct {
	ProtocolCode           string //协议编码
	ContractCode           string // 合约编码，用于分库作为数据库名
	ContractAddress        string // 合约地址
	AbiJson                string // abi的JSON数据
	DeployHeight           string // 部署合约的区块号
	RunHeight              string // 结束区块号
	CurrHeight             string // 当前爬取到的区块号
	OnceHeight             string // 单次爬取的区块
	ListenerEvent          string // 监听的事件（transfer ,approve等）
	SignedListenerEvent    string // 签名好的监听事件数据
	ListenerFunction       string // 监听的方法（swap , dispreseEther等）
	SignedListenerFunction string // 签名好的监听方法数据
	IsValid                string // 是否已启用
	UpdateTime             string // 修改时间(时间戳)
}

// contractColumns holds the columns for table Contract.
var contractColumns = ContractColumns{
	ProtocolCode:           "protocol_code",
	ContractCode:           "contract_code",
	ContractAddress:        "contract_address",
	AbiJson:                "abi_json",
	DeployHeight:           "deploy_height",
	RunHeight:              "run_height",
	CurrHeight:             "curr_height",
	OnceHeight:             "once_height",
	ListenerEvent:          "listener_event",
	SignedListenerEvent:    "signed_listener_event",
	ListenerFunction:       "listener_function",
	SignedListenerFunction: "signed_listener_function",
	IsValid:                "is_valid",
	UpdateTime:             "update_time",
}

// NewContractDao creates and returns a new DAO object for table data access.
func NewContractDao() *ContractDao {
	return &ContractDao{
		group:   "default",
		table:   "contract",
		columns: contractColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *ContractDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *ContractDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *ContractDao) Columns() ContractColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *ContractDao) Group() string {
	return dao.group
}

func (dao *ContractDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *ContractDao) CtxWithDatabase(ctx context.Context, database string) *gdb.Model {
	return dao.DB().Model(database + "." + dao.table).Safe().Ctx(ctx)
}

func (dao *ContractDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *ContractDao) QueryOneByCode(ctx context.Context, protocolCode string, contractCode string, chainName string) (rcd entity.ContractEntity, err error) {
	var res []entity.ContractEntity
	err = dao.CtxWithDatabase(ctx, chainName).Where("protocol_code =?", protocolCode).Where("contract_code =?", contractCode).Scan(&res)
	if err != nil {
		return rcd, err
	}
	if res != nil && len(res) > 0 {
		return res[0], nil
	} else {
		return rcd, nil
	}
}

func (dao *ContractDao) QueryOneByContract(ctx context.Context, protocolCode string, contractAddress string, chainName string) (rcd entity.ContractEntity, err error) {
	key := chainName + "_" + consts.COONTRACT_DATA_KEY + contractAddress
	v, err := g.Redis().Do(ctx, "GET", key)
	if err == nil {
		serr := v.Struct(&rcd)
		if serr == nil && !g.IsEmpty(rcd.ContractCode) {
			return rcd, nil
		}
	}
	var res []entity.ContractEntity
	err = dao.CtxWithDatabase(ctx, chainName).Where("protocol_code =?", protocolCode).Where("contract_address =?", contractAddress).Scan(&res)
	if err != nil {
		return rcd, err
	}
	if res != nil && len(res) > 0 {
		//设置缓存过期时间10天
		g.Redis().Do(ctx, "SETEX", key, 3600*24, rcd)
		return res[0], nil
	} else {
		return rcd, nil
	}
}

func (dao *ContractDao) QueryOneByContractAddress(ctx context.Context, contractAddress string, chainName string) (rcd entity.ContractEntity, err error) {
	var res []entity.ContractEntity
	err = dao.CtxWithDatabase(ctx, chainName).Where("contract_address =?", contractAddress).Scan(&res)
	if err != nil {
		return rcd, err
	}
	if res != nil && len(res) > 0 {
		return res[0], nil
	} else {
		return rcd, nil
	}
}

func (dao *ContractDao) QueryEnableListByProtocolCode(ctx context.Context, protocolCode string, chainName string, dataType int) (rcd []entity.ContractEntity, err error) {
	key := chainName + "_" + consts.PROTOCOL_CONTRACT_DATA_KEY + protocolCode
	v, err := g.Redis().Do(ctx, "GET", key)
	if err == nil {
		serr := v.Struct(&rcd)
		if serr == nil && !g.IsEmpty(len(rcd) > 0) {
			return rcd, nil
		}
	}

	err = dao.CtxWithDatabase(ctx, chainName).Where("is_valid =?", true).
		Where("protocol_code =?", protocolCode).Where("data_type =?", dataType).Scan(&rcd)
	if err != nil {
		g.Log().Debug(ctx, "error:", err)
		return nil, err
	}

	//设置缓存过期时间10天
	g.Redis().Do(ctx, "SETEX", key, 3600*24, rcd)
	return rcd, nil
}

func (dao *ContractDao) QueryEnableListWithDataType(ctx context.Context, chainName string, dataType int) (rcd []entity.ContractEntity, err error) {
	err = g.DB().Model(chainName+".contract c  inner join "+chainName+".protocol p on c.protocol_code  = p.protocol_code ").
		Fields("c.* ").
		Where(" c.is_valid = ?", true).
		Where(" p.is_valid = ?", true).
		Where(" c.data_type =?", dataType).Scan(&rcd)
	if err != nil {
		g.Log().Debug(ctx, "QueryEnableListWithDataType error:", err)
		return nil, err
	}
	return rcd, nil
}

func (dao *ContractDao) QueryEnableList(ctx context.Context, chainName string) (rcd []entity.ContractEntity, err error) {
	err = g.DB().Model(chainName+".contract c  inner join "+chainName+".protocol p on c.protocol_code  = p.protocol_code ").
		Fields("c.* ").
		Where(" c.is_valid = ?", true).
		Where(" p.is_valid = ?", true).Scan(&rcd)
	if err != nil {
		g.Log().Debug(ctx, "QueryEnableList error:", err)
		return nil, err
	}
	return rcd, nil
}

func (dao *ContractDao) QueryList(ctx context.Context, protocolCode string, contractCode string, isValid string, chainName string) (rcd []entity.ContractViewEntity, err error) {
	dataModel := g.DB().Model(chainName + ".contract c  inner join " + chainName + ".protocol p on c.protocol_code  = p.protocol_code ").
		Fields("c.protocol_code,c.contract_code,c.contract_address,c.deploy_height,c.run_height,c.curr_height,c.once_height,c.is_valid,c.data_type,c.update_time ")
	wBuild := dataModel.Builder()

	if !g.IsEmpty(protocolCode) {
		wBuild = wBuild.Where("c.protocol_code =?", protocolCode)
	}
	if !g.IsEmpty(contractCode) {
		wBuild = wBuild.Where("c.contract_code =?", contractCode)
	}
	if !g.IsEmpty(isValid) {
		status := false
		if isValid == "1" {
			status = true
			wBuild = wBuild.Where(wBuild.Where("c.is_valid =?", status).Where("p.is_valid =?", status))
		} else {
			wBuild = wBuild.Where(wBuild.Where("c.is_valid =?", status))
		}
	}
	wBuild = wBuild.Where("1=1") // 上述条件都不满足，where 需要一个默认条件
	err = dataModel.Where(wBuild).OrderDesc("update_time").Scan(&rcd)
	if err != nil {
		g.Log().Debug(ctx, "QueryEnableList error:", err)
		return nil, err
	}
	return rcd, nil
}

func (dao *ContractDao) QueryToAuditList(ctx context.Context, chainName string) (rcd []entity.ContractEntity, err error) {
	err = dao.CtxWithDatabase(ctx, chainName).Where("is_valid =?", false).Scan(&rcd)
	if err != nil {
		g.Log().Debug(ctx, "error:", err)
		return nil, err
	}
	return rcd, nil
}

func (dao *ContractDao) UpdateValid(ctx context.Context, protocolCode string, contractCode string, isVaild bool, onceHeight int, endHeight int, dataType int, chainName string) (err error) {
	_, err = dao.CtxWithDatabase(ctx, chainName).Update("is_valid=?, run_height=?, once_height=? , data_type=?", "contract_code=? and protocol_code=?", strconv.FormatBool(isVaild), endHeight, onceHeight, dataType, contractCode, protocolCode)
	if err != nil {
		g.Log().Debug(ctx, "ContractDao UpdateValid error:", err, ",ContractAddress:", contractCode)
		return err
	}

	ent, err := dao.QueryOneByCode(ctx, protocolCode, contractCode, chainName)
	if err == nil {
		//删除ProtocolCode下的合约配置缓存数据,删除合约配置缓存
		g.Redis().Do(ctx, "DEL", chainName+"_"+consts.PROTOCOL_CONTRACT_DATA_KEY+ent.ProtocolCode)
		g.Redis().Do(ctx, "DEL", chainName+"_"+consts.COONTRACT_DATA_KEY+ent.ContractAddress)
	}
	return nil
}

func (dao *ContractDao) UpdateInfo(ctx context.Context, protocolCode string, contractCode string, onceHeight string, deployHeight string, chainName string) (err error) {
	dModel := dao.CtxWithDatabase(ctx, chainName)

	if !g.IsEmpty(onceHeight) && !g.IsEmpty(deployHeight) {
		_, err = dModel.Update("once_height=? , deploy_height=?  ", "contract_code=? and protocol_code=?", onceHeight, deployHeight, contractCode, protocolCode)
	} else if !g.IsEmpty(onceHeight) && g.IsEmpty(deployHeight) {
		_, err = dModel.Update("once_height=?", "contract_code=? and protocol_code=?", onceHeight, contractCode, protocolCode)
	} else if g.IsEmpty(onceHeight) && !g.IsEmpty(deployHeight) {
		_, err = dModel.Update("deploy_height=?  ", "contract_code=? and protocol_code=?", deployHeight, contractCode, protocolCode)
	}

	if err != nil {
		g.Log().Debug(ctx, "Contract UpdateInfo error , ", err)
		return err
	}

	//删除ProtocolCode下的合约配置缓存数据,删除合约配置缓存
	ent, err := dao.QueryOneByCode(ctx, protocolCode, contractCode, chainName)
	if err == nil {
		//删除ProtocolCode下的合约配置缓存数据,删除合约配置缓存
		g.Redis().Do(ctx, "DEL", chainName+"_"+consts.PROTOCOL_CONTRACT_DATA_KEY+ent.ProtocolCode)
		g.Redis().Do(ctx, "DEL", chainName+"_"+consts.COONTRACT_DATA_KEY+ent.ContractAddress)
	}
	return nil
}

func (dao *ContractDao) ExecInsert(ctx context.Context, in model.ContractCreateInput, chainName string) (err error) {
	var dimSqlDML bytes.Buffer
	dimSqlDML.WriteString("insert into ")
	dimSqlDML.WriteString(chainName + "." + dao.table)
	dimSqlDML.WriteString(" (protocol_code,contract_code,contract_address,abi_json,deploy_height,run_height,curr_height,once_height,listener_event,signed_listener_event,listener_function,signed_listener_function,is_valid,update_time) values ( ")
	dimSqlDML.WriteString("'" + in.ProtocolCode + "'")
	dimSqlDML.WriteString(",")
	dimSqlDML.WriteString("'" + in.ContractCode + "'")
	dimSqlDML.WriteString(",")
	dimSqlDML.WriteString("'" + in.ContractAddress + "'")
	dimSqlDML.WriteString(",")
	dimSqlDML.WriteString("'" + in.AbiJson + "'")
	dimSqlDML.WriteString(",")
	dimSqlDML.WriteString(strconv.FormatInt(int64(in.DeployHeight), 10))
	dimSqlDML.WriteString(",")
	dimSqlDML.WriteString(strconv.FormatInt(int64(in.RunHeight), 10))
	dimSqlDML.WriteString(",")
	dimSqlDML.WriteString(strconv.FormatInt(int64(in.CurrHeight), 10))
	dimSqlDML.WriteString(",")
	dimSqlDML.WriteString(strconv.FormatInt(int64(in.OnceHeight), 10))
	dimSqlDML.WriteString(",")
	dimSqlDML.WriteString("'" + in.ListenerEvent + "'")
	dimSqlDML.WriteString(",")
	dimSqlDML.WriteString("'" + in.SignedListenerEvent + "'")
	dimSqlDML.WriteString(",")
	dimSqlDML.WriteString("'" + in.ListenerFunction + "'")
	dimSqlDML.WriteString(",")
	dimSqlDML.WriteString("'" + in.SignedListenerFunction + "'")
	dimSqlDML.WriteString(",")
	dimSqlDML.WriteString(strconv.FormatBool(in.IsValid))
	dimSqlDML.WriteString(",")
	dimSqlDML.WriteString(strconv.FormatInt(int64(in.UpdateTime), 10))
	dimSqlDML.WriteString(")")

	_, err = dao.DB().Exec(ctx, dimSqlDML.String())
	if err != nil {
		g.Log().Debug(ctx, "ContractDao ExecInsert error:", err, ",ContractAddress:", in.ContractAddress, ",ContractCode:", in.ContractCode)
		return err
	}

	//删除ProtocolCode下的合约配置缓存数据
	g.Redis().Do(ctx, "DEL", chainName+"_"+consts.PROTOCOL_CONTRACT_DATA_KEY+in.ProtocolCode)

	return
}
