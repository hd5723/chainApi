// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"OnchainParser/internal/model"
	"OnchainParser/internal/model/entity"
	"bytes"
	"context"
	"encoding/json"
	"github.com/housemecn/snowflake"
	"strconv"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// ContractSignDao is the data access object for table contract_sign.
type ContractSignDao struct {
	table   string              // table is the underlying table name of the DAO.
	group   string              // group is the database configuration group name of current DAO.
	columns ContractSignColumns // columns contains all the column names of Table for convenient usage.
}

// ContractSignColumns defines and stores column names for table contract_sign.
type ContractSignColumns struct {
	Id           string // 主键
	Address      string // 合约地址
	Name         string // 方法名称
	Sign         string // 签名原始数据
	SignText     string // 签名数据
	SignTextView string // 签名数据，用于页面展示
	Type         string // function、event
	UpdateTime   string // 修改时间(时间戳)
}

// contractSignColumns holds the columns for table contract_sign.
var contractSignColumns = ContractSignColumns{
	Id:           "id",
	Address:      "address",
	Name:         "name",
	Sign:         "sign",
	SignText:     "sign_text",
	SignTextView: "sign_text_view",
	Type:         "type",
	UpdateTime:   "update_time",
}

// NewContractSignDao creates and returns a new DAO object for table data access.
func NewContractSignDao() *ContractSignDao {
	return &ContractSignDao{
		group:   "default",
		table:   "contract_sign",
		columns: contractSignColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *ContractSignDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *ContractSignDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *ContractSignDao) Columns() ContractSignColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *ContractSignDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *ContractSignDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *ContractSignDao) CtxWithDatabase(ctx context.Context, database string) *gdb.Model {
	return dao.DB().Model(database + "." + dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *ContractSignDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *ContractSignDao) QueryOneByName(ctx context.Context, contractAddress string, name string, chainName string) (rcd entity.ContractSignEntity, err error) {
	temp, err := dao.CtxWithDatabase(ctx, chainName).Where("address =?", contractAddress).Where("name =?", name).One()
	if err != nil {
		return rcd, err
	}
	json.Unmarshal([]byte(temp.Json()), &rcd)
	return
}

func (dao *ContractSignDao) QueryListByName(ctx context.Context, contractAddress string, beginLimt int, pageSize int, chainName string) (rcd gdb.Result, err error) {
	temp, err := dao.CtxWithDatabase(ctx, chainName).Fields("name", "sign").Where("address =?", contractAddress).Limit(beginLimt, pageSize).All()
	if err != nil {
		return rcd, err
	}
	return temp, nil
}

func (dao *ContractSignDao) QueryListByNameAndType(ctx context.Context, contractAddress string, beginLimt int, pageSize int, dataType string, chainName string) (rcd gdb.Result, err error) {
	temp, err := dao.CtxWithDatabase(ctx, chainName).Fields("name", "sign").Where("address =?", contractAddress).Where("type=?", dataType).Limit(beginLimt, pageSize).All()
	if err != nil {
		return rcd, err
	}
	return temp, nil
}

func (dao *ContractSignDao) ExecInsert(ctx context.Context, in model.ContractSignCreateInput, chainName string) bool {
	//ID由雪花ID生成
	s, err := snowflake.NewSnowflake(int64(0), int64(0))
	if err != nil {
		g.Log().Debug(ctx, "create id error:", err)
		return false
	}

	var dimSqlDML bytes.Buffer
	dimSqlDML.WriteString("insert into ")
	dimSqlDML.WriteString(chainName + "." + dao.table)
	dimSqlDML.WriteString(" (id,name,sign,sign_text,sign_text_view,address,type,update_time) values ( ")
	dimSqlDML.WriteString(strconv.FormatInt(int64(s.NextVal()), 10))
	dimSqlDML.WriteString(",")
	dimSqlDML.WriteString("'" + in.Name + "'")
	dimSqlDML.WriteString(",")
	dimSqlDML.WriteString("'" + in.Sign + "'")
	dimSqlDML.WriteString(",")
	dimSqlDML.WriteString("'" + in.SignText + "'")
	dimSqlDML.WriteString(",")
	dimSqlDML.WriteString("'" + in.SignTextView + "'")
	dimSqlDML.WriteString(",")
	dimSqlDML.WriteString("'" + in.Address + "'")
	dimSqlDML.WriteString(",")
	dimSqlDML.WriteString("'" + in.Type + "'")
	dimSqlDML.WriteString(",")
	dimSqlDML.WriteString(strconv.FormatInt(int64(in.UpdateTime), 10))
	dimSqlDML.WriteString(")")

	_, err = dao.DB().Exec(ctx, dimSqlDML.String())
	if err != nil {
		g.Log().Debug(ctx, "error:", err)
		return false
	}
	return true
}
